%% ЗАДАНИЕ 1. Вычислить предел (вариант 1, подвариант а)
pkg load symbolic;  % Загружаем символьный пакет
syms x;
% Пример функции: f(x) = (10*x^2 - x + 1) / (5*x^2 + 6*x - 2)
f = (10*x^2 - x + 1) / (5*x^2 + 6*x - 2);
% Вычисляем предел при x -> бесконечность
limit_result = limit(f, x, inf);
disp(['Задание 1, вариант 1 (а). Предел равен: ', char(limit_result)]);

%% ЗАДАНИЕ 2. Вычислить все производные с первого до десятого порядка (вариант 1, подвариант б)
%syms x;
% Функция: y = 2*tan^2(1-3*x)
%y = 2 * (tan(1 - 3*x))^2;
%disp('Задание 2, вариант 1 (б). Производные функции y = 2*tan^2(1-3*x):');
%for n = 1:10
%    dy = diff(y, x, n);  % Вычисляем n-ю производную
%    dy_simplified = simplify(dy);
%    disp(['y^(' num2str(n) ') = ' char(dy_simplified)]);
%end
%% ЗАДАНИЕ 2 (рекурсивно). Вычислить производные с первого до десятого порядка
pkg load symbolic;
syms x;

% Исходная функция
y = 2 * (tan(1 - 3*x))^2;

% Рекурсивная функция для дифференцирования
function dy = recursive_diff(expr, var, n)
    if n == 0
        dy = expr;
    else
        % сначала вычисляем (n-1)-ю, потом дифференцируем
        prev = recursive_diff(expr, var, n-1);
        dy   = diff(prev, var);
    end
end

disp('Рекурсивно вычисленные производные функции y = 2*tan^2(1-3*x):');
for n = 1:10
    dn = simplify( recursive_diff(y, x, n) );
    disp( sprintf('y^(%d) = %s', n, char(dn)) );
end

%% ЗАДАНИЕ 3. Найти экстремумы функции и записать уравнения асимптот (вариант 1, подвариант д)
syms x;
% Функция: y = x^2/(x - 1)^2
y = x^2 / (x - 1)^2;
% Находим первую производную
dy = diff(y, x);
dy_simplified = simplify(dy);
disp('Задание 3, вариант 1 (д). Первая производная:');
pretty(dy_simplified);

% Находим критические точки, решая уравнение dy = 0
critical_points = solve(dy == 0, x);
disp('Критические точки:');
disp(critical_points);

% Определяем поведение функции в точках разрыва и на бесконечности:
limit_y_at_1 = limit(y, x, 1);  % поведение при x -> 1 (вертикальная асимптота)
limit_y_at_inf = limit(y, x, inf);  % горизонтальная асимптота
disp(['Предел при x -> 1 (точка разрыва): ', char(limit_y_at_1)]);
disp(['Горизонтальная асимптота: y = ', char(limit_y_at_inf)]);

%% ЗАДАНИЕ 4. Найти экстремумы функции двух переменных (вариант 1, подвариант а)
% Функция: z = x^2 - 2y^2 + 4xy - 6x - 1
pkg load symbolic;  % повторная загрузка пакета (если необходимо)
syms x y;
z = x^2 - 2*y^2 + 4*x*y - 6*x - 1;

% Вычисляем частные производные
zx = diff(z, x);
zy = diff(z, y);
disp('Задание 4, вариант 1 (а). Частные производные:');
disp(['dz/dx = ', char(simplify(zx))]);
disp(['dz/dy = ', char(simplify(zy))]);

% Находим критическую точку, решая систему уравнений: dz/dx = 0, dz/dy = 0
[solx, soly] = solve([zx == 0, zy == 0], [x, y]);
disp('Критическая точка:');
disp([solx, soly]);

% Вычисляем вторые производные для анализа экстремума
zxx = diff(zx, x);
zyy = diff(zy, y);
zxy = diff(zx, y);
H = [zxx, zxy; zxy, zyy];  % Гессиан
disp('Гессиан:');
disp(simplify(H));

% Вычисляем определитель Гессиана
detH = simplify(det(H));
disp(['Определитель Гессиана: ', char(detH)]);

% Анализируем тип критической точки:
% Если zxx > 0 и detH > 0, то локальный минимум.
% Если zxx < 0 и detH > 0, то локальный максимум.
% Если detH < 0, то седловая точка.
zxx_val = subs(zxx, {x, y}, {solx, soly});
if detH > 0
    if zxx_val > 0
        disp('Функция имеет локальный минимум в критической точке.');
    elseif zxx_val < 0
        disp('Функция имеет локальный максимум в критической точке.');
    else
        disp('Неоднозначное поведение в критической точке.');
    end
elseif detH < 0
    disp('Функция имеет седловую точку.');
else
    disp('Невозможно определить тип экстремума (нулевой определитель Гессиана).');
end